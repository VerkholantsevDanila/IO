from flask import Flask, request
import mysql.connector
import os
import logging
import hashlib
import telebot
from dotenv import load_dotenv
from datetime import datetime
import pytz

load_dotenv()

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_config = {
    'host': os.getenv("MYSQL_HOST", "mysql"),
    'user': os.getenv("MYSQL_USER", "root"),
    'password': os.getenv("MYSQL_PASSWORD", "RjhzdsqCkjy"),
    'database': os.getenv("MYSQL_DATABASE", "ioio"),
    'port': 3306
}

# –°–µ–∫—Ä–µ—Ç –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
YOOMONEY_SECRET = os.getenv("YOOMONEY_SECRET")
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)


@app.route('/yoomoney-webhook', methods=['POST'])
def yoomoney_webhook():
    data = request.form
    logging.info(f"[Webhook INCOMING] {data}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        notification_type = data.get('notification_type', '')
        operation_id = data.get('operation_id', '')
        amount = data.get('amount', '')
        withdraw_amount = data.get('withdraw_amount', '')
        currency_code = data.get('currency', '')  # —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥
        datetime_ = data.get('datetime', '')
        sender = data.get('sender', '')
        codepro = data.get('codepro', '')
        label = data.get('label', '')
        sha1_hash = data.get('sha1_hash', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        hash_string = f"{notification_type}&{operation_id}&{amount}&{currency_code}&{datetime_}&{sender}&{codepro}&{YOOMONEY_SECRET}&{label}"
        calculated_hash = hashlib.sha1(hash_string.encode("utf-8")).hexdigest()

        if sha1_hash != calculated_hash:
            logging.warning("[Webhook] ‚ùå Hash mismatch ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–ª—å—à–∏–≤–∫–∞!")
            return "UNAUTHORIZED", 403

        # ‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ—à–ª–∞ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
        currency = {
            '643': 'RUB',
            '840': 'USD',
            '978': 'EUR'
        }.get(currency_code, currency_code)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ datetime –∏ –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Moscow)
        try:
            utc_time = datetime.strptime(datetime_, '%Y-%m-%dT%H:%M:%SZ')
            local_tz = pytz.timezone('Europe/Moscow')  # –∏–ª–∏ –¥—Ä—É–≥–æ–π timezone –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            datetime_obj = utc_time.replace(tzinfo=pytz.utc).astimezone(local_tz)
        except Exception:
            datetime_obj = datetime.now(pytz.timezone('Europe/Moscow'))  # fallback

        if label and withdraw_amount:
            db = mysql.connector.connect(**db_config)
            cursor = db.cursor()

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("UPDATE users SET balance = balance + %s WHERE tg_user_id = %s",
                           (int(float(withdraw_amount)), label))
            db.commit()

            # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É payments
            cursor.execute("""
                INSERT INTO payments (
                    tg_user_id, amount, withdraw_amount, currency, datetime,
                    operation_id, label, comment, type
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, 'replenish')
            """, (
                int(label), float(amount), float(withdraw_amount), currency,
                datetime_obj, operation_id, label, sender
            ))
            db.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT chat_id FROM users WHERE tg_user_id = %s", (label,))
            row = cursor.fetchone()
            cursor.close()
            db.close()

            if row:
                chat_id = row[0]
                bot.send_message(chat_id, f"üéâ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {withdraw_amount} {currency}!")

            logging.info(f"[Webhook] ‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è tg_user_id={label} –Ω–∞ {withdraw_amount} {currency} (–ø–æ—Å—Ç—É–ø–∏–ª–æ {amount})")

        return "OK"

    except Exception as e:
        logging.error(f"[Webhook ERROR] {e}")
        return "SERVER ERROR", 500


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8088)
