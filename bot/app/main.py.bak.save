import os
import telebot
import mysql.connector
import qrcode
import time
import random
import string
import schedule
from threading import Thread
from io import BytesIO
from telebot import types
from datetime import datetime, timedelta

subscribe_server_url = os.getenv("SUBSCRIPTION_SERVER_URL")
subscriptions_max_count = int(os.getenv("SUBSCRIPTIONS_MAX_COUNT", 5)) # Maximum number of subscriptions per user
bot_token = os.getenv("BOT_TOKEN") # Telegram bot API key
db_config = {
    'host': os.getenv("MYSQL_HOST"),
    'user': os.getenv("MYSQL_USER"),
    'password': os.getenv("MYSQL_PASSWORD"),
    'database': os.getenv("MYSQL_DATABASE"),
    'port': int(os.getenv("MYSQL_PORT", 3306))
}
bot = telebot.TeleBot(bot_token)
db = mysql.connector.connect(**db_config)

@bot.message_handler(commands=['start'])
# Reaction on /start command
def user_check(message):
    # Check is user exists in database
    chat_id = message.chat.id
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    sql = "SELECT * FROM users WHERE chat_id = %s"
    cursor = db.cursor()
    cursor.execute(sql, (chat_id,))
    user = cursor.fetchone()

    if user:
        # If user exists, update information about user in database
        sql = "UPDATE users SET chat_id = %s, username = %s, first_name = %s, last_name = %s WHERE tg_user_id = %s"
        val = (chat_id, username, first_name, last_name, user_id)
        cursor.execute(sql, val)
        db.commit()
        cursor.close()

    else:
        # If user not exists, add information about user to database
        sql = "INSERT INTO users (chat_id, tg_user_id, username, first_name, last_name) VALUES (%s, %s, %s, %s, %s)"
        val = (chat_id, user_id, username, first_name, last_name)
        cursor.execute(sql, val)
        db.commit()
        cursor.close()

    bot.delete_message(message.chat.id, message.message_id)
    bot.send_message(
        message.chat.id,
        "üîπ<b>IO</b>üîπ\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à VPN-—Å–µ—Ä–≤–∏—Å!\n\n"
        "üõ°Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å\n"
        "üåç –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü\n"
        "‚ö° –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n\n"
        "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ</i> ‚¨áÔ∏è",
        parse_mode='html'
    )

    menu(message)

def menu(message):
    # Main menu page
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîπ –ë–∞–ª–∞–Ω—Å', callback_data='balance'))
    markup.add(types.InlineKeyboardButton('üîπ –ü–æ–¥–ø–∏—Å–∫–∏', callback_data='subscriptions'))
    markup.add(types.InlineKeyboardButton('üîπ –ü–æ–º–æ—â—å', callback_data='gethelp'))
    bot.send_message(message.chat.id,f'<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', parse_mode='html', reply_markup=markup)

def gethelp(message):
    # Page with Instruction
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è EN', url='https://telegra.ph/IOIO-07-04-2'))
    markup.add(types.InlineKeyboardButton('üîπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è RU', url='https://telegra.ph/IOIO-07-04-3'))
    markup.add(types.InlineKeyboardButton('üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id,f'<b>–ü–æ–º–æ—â—å</b>', parse_mode='html', reply_markup=markup)

def balance(message):
    # Balance menu page
    markup = types.InlineKeyboardMarkup()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤–æ–µ!)
    db = mysql.connector.connect(**db_config)
    cursor = db.cursor()

    cursor.execute("SELECT tg_user_id, balance FROM users WHERE chat_id = %s", (message.chat.id,))
    result = cursor.fetchone()
    cursor.close()
    db.close()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–π

    if result:
        tg_user_id, balance = result
        add_funds_url = f"https://yoomoney.ru/quickpay/shop-widget?writer=seller&targets=Paste%20your%20description%20here&targets-hint=&default-sum=150&label={tg_user_id}&button-text=12&payment-type-choice=on&hint=&successURL=&quickpay=shop&account=4100119221041643"
    else:
        tg_user_id = None
        balance = 0
        add_funds_url = "https://yoomoney.ru"

    markup.add(types.InlineKeyboardButton('‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', url=add_funds_url))
    markup.add(types.InlineKeyboardButton('‚â° –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='pay_history'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    bot.send_message(
        message.chat.id,
        f"<b>–ë–∞–ª–∞–Ω—Å: </b>{balance} RUB\n<b>–õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫: </b>{subscriptions_max_count}",
        parse_mode='html',
        reply_markup=markup
    )



def pay_history(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='balance'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    db = mysql.connector.connect(**db_config)
    cursor = db.cursor()
    cursor.execute("SELECT id FROM users WHERE chat_id = %s", (message.chat.id,))
    row = cursor.fetchone()

    if row:
        user_id = row[0]

        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü
        cursor.execute("""
            SELECT 'replenish' as type, withdraw_amount, currency, datetime, details
            FROM payments
            WHERE tg_user_id = %s

            UNION ALL

            SELECT 'subscription' as type, amount, currency, created_at, details
            FROM subscription_payments
            WHERE user_id = %s

            ORDER BY datetime DESC
            LIMIT 10
        """, (message.chat.id, user_id))

        rows = cursor.fetchall()
        if rows:
            history_text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
            for p_type, amount, currency, dt, details in rows:
                dt_str = dt.strftime('%d.%m.%Y %H:%M')
                if p_type == 'replenish':
                    history_text += f"üì• <b>{amount:.2f} {currency}</b> ‚Äî {dt_str}\n"
                elif p_type == 'subscription':
                    history_text += f"üì§ <b>{amount:.2f} {currency}</b> ‚Äî {dt_str}\n{details.strip()}\n\n"
        else:
            history_text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n<i>‚ùå –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</i>"
    else:
        history_text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n<i>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>"

    cursor.close()
    db.close()
    bot.send_message(message.chat.id, history_text, parse_mode='HTML', reply_markup=markup)



def subscriptions(message):
    # List all active user subscriptions
    bill_user_id = get_user_id(message)
    subscription = get_user_subscriptions(bill_user_id)
    active_subscriptions_count = int(len(subscription))
    markup = types.InlineKeyboardMarkup()
    for subscription in subscription:
        flag = get_flag_emoji(subscription[3])
        markup.add(types.InlineKeyboardButton(f"{flag} {subscription[2]} - ID {subscription[0]}", callback_data=f"subscription_{subscription[0]}"))
    if active_subscriptions_count < subscriptions_max_count:
        markup.add(types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='add_new_subscription'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id, f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: </b>{active_subscriptions_count}", parse_mode='html', reply_markup=markup)

def subscription_info(message, subscription_id):
    # Menu page about selected active subscription
    markup = types.InlineKeyboardMarkup()
    subscription = get_subscription(subscription_id)
    name = subscription[0][2]
    flag = get_flaga_emoji(subscription[0][3])
    region = subscription[0][3]
    active_until = datetime.fromtimestamp(subscription[0][4])
    token = subscription[0][1]
    cost = subscription[0][6]
    markup.add(types.InlineKeyboardButton('üîπ –°–∫–æ—Ä–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f"subscriptionlink_{region}_{token}_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
üî≥ –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥', callback_data=f"subscriptionqr_{region}_{token}_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üîª –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f"unsubscribe_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='subscriptions'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id, f"<b>ID –ü–æ–¥–ø–∏—Å–∫–∏: </b>{subscription_id}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{name}\n<b>–†–µ–≥–∏–æ–Ω: </b>{flag} {region}\n<b>–¶–µ–Ω–∞: </b>{cost} RUB\n<b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: </b>{active_until}\n<b>Token: </b>{token}\n", parse_mode='html', reply_markup=markup)

def subscriptionlink_copy(message, region, token, subscription_id):
    # Copy Code menu page
    markup = types.InlineKeyboardMarkup()
    subscription_url = f"{subscribe_server_url}?token={token}"
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f"subscription_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id, f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞::\n\n`{subscription_url}`", parse_mode="Markdown", reply_markup=markup)

def subscriptionqr_image(message, region, token, subscription_id):
    # QR Code menu page
    markup = types.InlineKeyboardMarkup()
    subscription_url = f"{subscribe_server_url}?token={token}"
    qr_img = generate_qr_code(subscription_url)  # Generate QR code
    byte_io = BytesIO()  # Save QR code to BytesIO
    qr_img.save(byte_io, 'PNG')
    byte_io.seek(0)  # Move cursor to zero point
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f"subscription_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_photo(message.chat.id, byte_io, reply_markup=markup)

def new_subscription_list(message):
    # List all available subscriptions to purchase menu page
    all_subscriptions = get_all_subscriptions()
    markup = types.InlineKeyboardMarkup()
    for subscription in all_subscriptions:
        subscription_id = subscription[0]
        subscription_name = subscription[1]
        flag = get_flag_emoji(subscription[3])
        markup.add(types.InlineKeyboardButton(f"{flag} {subscription_name}", callback_data=f"new_subscription_info_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='menu'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id, '<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>', parse_mode='html', reply_markup=markup)

def new_subscription_info(message, subscription_id):
    # Purchase subscription (info about new subscription) menu page
    subscription = get_new_subscription_info(subscription_id)
    name = subscription[0][1]
    period_seconds = int(subscription[0][2])
    flag = get_flag_emoji(subscription[0][3])
    cost = subscription[0][4]
    current_time = int(time.time())
    active_until = datetime.fromtimestamp(current_time + period_seconds)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚ûï –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f"purchase_subscription_{subscription_id}_{period_seconds}"))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='add_new_subscription'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id, f"<b>–ü–æ–¥–ø–∏—Å–∫–∞: </b>{flag} {name}\n<b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: </b>{active_until}\n<b>–¶–µ–Ω–∞: </b>{cost} RUB\n<i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {subscriptions_max_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!</i>\n<i>–ü–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.</i>\n", parse_mode='html', reply_markup=markup)

def unsubscribe(message, subscription_id):
    # Unsubscribe menu page
    markup = types.InlineKeyboardMarkup()
    subscription = get_subscription(subscription_id)
    name = subscription[0][2]
    flag = get_flag_emoji(subscription[0][3])
    region = subscription[0][3]
    active_until = datetime.fromtimestamp(subscription[0][4])
    token = subscription[0][1]
    cost = subscription[0][6]
    markup.add(types.InlineKeyboardButton('üîª –î–∞, —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data=f"remove_subscription_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f"subscription_{subscription_id}"))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    bot.send_message(message.chat.id, f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É??</b>\n<b>ID –ü–æ–¥–ø–∏—Å–∫–∏: </b>{subscription_id}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{name}\n<b>–†–µ–≥–∏–æ–Ω: </b>{flag} {region}\n<b>–¶–µ–Ω–∞: </b>{cost} RUB\n<b>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: </b>{active_until}\n<b>–¢–æ–∫–µ–Ω: </b>{token}\n<b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.!</b>", parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'balance':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        balance(callback.message)
    elif callback.data == 'menu':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        menu(callback.message)
    elif callback.data == 'gethelp':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        gethelp(callback.message)
    elif callback.data == 'pay_history':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        pay_history(callback.message)
    elif callback.data == 'subscriptions':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscriptions(callback.message)
    elif callback.data.startswith("subscription_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        subscription_id = subscription_data[1]
        subscription_info(callback.message, subscription_id)
    elif callback.data.startswith("subscriptionlink_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        region = subscription_data[1]
        token = subscription_data[2]
        subscription_id = subscription_data[3]
        subscriptionlink_copy(callback.message, region, token, subscription_id)
    elif callback.data.startswith("subscriptionqr_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        region = subscription_data[1]
        token = subscription_data[2]
        subscription_id = subscription_data[3]
        subscriptionqr_image(callback.message, region, token, subscription_id)
    elif callback.data == 'add_new_subscription':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        new_subscription_list(callback.message)
    elif callback.data.startswith("new_subscription_info_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        subscription_id = subscription_data[3]
        new_subscription_info(callback.message, subscription_id)
    elif callback.data.startswith("purchase_subscription_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        subscription_id = subscription_data[2]
        period = subscription_data[3]
        purchase_subscription(callback.message, subscription_id, period)
    elif callback.data.startswith("unsubscribe_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        subscription_id = subscription_data[1]
        unsubscribe(callback.message, subscription_id)
    elif callback.data.startswith("remove_subscription_"):
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        subscription_data = callback.data.split("_")
        subscription_id = subscription_data[2]
        remove_subscription(callback.message, subscription_id)

def get_user_id(message):
    # Get billing user ID from database
    chat_id = message.chat.id
    sql = 'SELECT id FROM users WHERE chat_id = %s'
    val = (chat_id,)
    cursor = db.cursor()
    cursor.execute(sql, val)
    result = cursor.fetchall()
    cursor.close()
    billing_user_id = result[0][0]
    return billing_user_id

def get_user_subscriptions(bill_user_id):
    # Get all user subscriptions from billing
    sql = 'SELECT tok.id, tok.token, tar.name, tar.region, tok.end_date, tok.is_active FROM tokens tok JOIN tariffs tar ON tok.tariff_id = tar.id WHERE user_id = %s'
    val = (bill_user_id,)
    cursor = db.cursor()
    cursor.execute(sql, val)
    result = cursor.fetchall()
    cursor.close()
    subscription = result
    return subscription

def get_subscription(subscription_id):
    # Get information about subscription from billing
    sql = 'SELECT tok.id, tok.token, tar.name, tar.region, tok.end_date, tok.is_active, tar.cost FROM tokens tok JOIN tariffs tar ON tok.tariff_id = tar.id WHERE tok.id = %s'
    val = (subscription_id,)
    cursor = db.cursor()
    cursor.execute(sql, val)
    result = cursor.fetchall()
    cursor.close()
    return result

def get_all_subscriptions():
    # Get all available subscriptions from billing (all tariffs)
    sql = 'SELECT id, name, period, region, cost FROM tariffs'
    cursor = db.cursor()
    cursor.execute(sql)
    result = cursor.fetchall()
    cursor.close()
    return result

def get_new_subscription_info(subscription_id):
    # Get new subscription info from billing (tariff info)
    sql = 'SELECT id, name, period, region, cost FROM tariffs WHERE id = %s'
    val = (subscription_id,)
    cursor = db.cursor()
    cursor.execute(sql, val)
    result = cursor.fetchall()
    cursor.close()
    return result

def purchase_subscription(message, subscription_id, period):
    user_id = get_user_id(message)
    cursor = db.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    cursor.execute("SELECT cost FROM tariffs WHERE id = %s", (subscription_id,))
    result = cursor.fetchone()
    if not result:
        cursor.close()
        bot.send_message(message.chat.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    cost = int(result[0])

    # –°–í–ï–ñ–ò–ô –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –±–∞–∑—ã, –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
    cursor.execute("SELECT balance FROM users WHERE id = %s", (user_id,))
    result = cursor.fetchone()
    if not result:
        cursor.close()
        bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    balance = int(result[0])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å ‚Äî —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π

    if balance < cost:
        # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        add_funds_url = f"https://yoomoney.ru/quickpay/shop-widget?writer=seller&targets=VPN&default-sum={cost}&label={message.chat.id}&button-text=12&payment-type-choice=on&quickpay=shop&account=4100119221041643"

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', url=add_funds_url))
        markup.add(types.InlineKeyboardButton('‚â° –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', callback_data='pay_history'))
        markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

        bot.send_message(
            message.chat.id,
            f"<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä—É–±.</b>\n"
            f"üí≥ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å: <b>{cost} —Ä—É–±.</b>",
            parse_mode='html',
            reply_markup=markup
        )
        cursor.close()
        return

#    if balance < cost:
#        cursor.close()
#        bot.send_message(message.chat.id, f"‚ùå –ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} RUB, required: {cost} RUB")
#        menu(message)
#        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    new_balance = balance - cost
    cursor.execute("UPDATE users SET balance = %s WHERE id = %s", (new_balance, user_id))

    token = generate_token()
    start_date = int(time.time())
    period_seconds = int(period)
    end_date = start_date + period_seconds
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É tokens —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    cursor.execute(
        "INSERT INTO tokens(user_id, tariff_id, token, start_date, end_date) VALUES(%s, %s, %s, %s, %s)",
        (user_id, subscription_id, token, start_date, end_date)
    )

    token_id = cursor.lastrowid  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–∫–µ–Ω–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
 

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    cursor.execute("SELECT name FROM tariffs WHERE id = %s", (subscription_id,))
    result = cursor.fetchone()
    if not result:
        cursor.close()
        bot.send_message(message.chat.id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    subscription_name = result[0]

    cursor.execute(
      "INSERT INTO subscription_payments (tg_user_id, user_id, tariff_id, token_id, amount, currency, details) VALUES (%s, %s, %s, %s, %s, %s, %s)",
      (
        message.chat.id,
        user_id,
        subscription_id,
        token_id,
        cost,
        'RUB',
        f"üîê –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_name} | –û—Å—Ç–∞—Ç–æ–∫: {new_balance} RUB"
      )
    )

    db.commit()
    cursor.close()
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞! {cost} RUB —Å–ø–∏—Å–∞–Ω–∞ —Å–æ —Å—á–µ—Ç–∞.")
    subscriptions(message)


def remove_subscription(message, subscription_id):
    # Remove user subscription
    sql = 'DELETE FROM tokens WHERE id = %s'
    val = (subscription_id,)
    cursor = db.cursor()
    cursor.execute(sql, val)
    db.commit()
    cursor.close()
    subscriptions(message)

def get_flag_emoji(country_code):
    # Get flag emoji from region code
    country_code = country_code.upper()
    if len(country_code) != 2 or not country_code.isalpha():
        raise ValueError("Country code must be two letters (e.g., 'ru', 'us', 'fi')")
    flag_emoji = "".join(chr(ord(char) + 127397) for char in country_code)
    return flag_emoji

def generate_token(length=24):
    # Generate token
    characters = string.ascii_letters + string.digits
    token = ''.join(random.choice(characters) for _ in range(length))
    return token

def generate_qr_code(subscription_url):
    # Generate QR code
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=2,
    )
    qr.add_data(subscription_url)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    return img

################################################################
def expired_subscription_del():
    current_time = int(time.time())
    sql = "DELETE FROM tokens WHERE end_date < %s"
    cursor = db.cursor()
    cursor.execute(sql, (current_time,))
    db.commit()
    cursor.close()

def run_scheduler():
    schedule.every(5).minutes.do(expired_subscription_del)
    while True:
        schedule.run_pending()
        time.sleep(1)

scheduler_thread = Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()
################################################################

bot.polling(none_stop=True)
